



Operations and Management Area Working Group                     T. Dahm
Internet-Draft                                                          
Updates: RFC8097 (if approved)                                   D. Gash
Intended status: Informational                       Cisco Systems, Inc.
Expires: 13 March 2022                                            A. Ota
                                                        9 September 2021


               TACACS+ Security, TLS, and SSH Public Keys
                           xml2rfc-docs-3.9.1

Abstract

   The TACACS+ Protocol [RFC8907] provides device administration for
   routers, network access servers and other networked computing devices
   via one or more centralized servers.  This document, a companion to
   the TACACS+ protocol [RFC8907], adds new packet formats to improve
   security and function, Transport Layer Security (currently defined by
   TLS 1.2 [RFC5246] and TLS 1.3 [RFC8446]) support, and support for SSH
   [RFC4716] public keys and deprecates former inferior security
   mechanisms.

Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [BCP14] when, and only when, they appear in all capitals, as shown
   here.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 13 March 2022.





Dahm, et al.              Expires 13 March 2022                 [Page 1]

Internet-Draft              TACACS+ Security              September 2021


Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Technical Definitions . . . . . . . . . . . . . . . . . . . .   3
     2.1.  AVP . . . . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.2.  Empty Value . . . . . . . . . . . . . . . . . . . . . . .   3
     2.3.  Unsecure Connection . . . . . . . . . . . . . . . . . . .   4
     2.4.  Peer  . . . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.5.  TLS Connection  . . . . . . . . . . . . . . . . . . . . .   4
   3.  TLS for TACACS+ . . . . . . . . . . . . . . . . . . . . . . .   4
     3.1.  Well-Known TCP/IP Port  . . . . . . . . . . . . . . . . .   4
     3.2.  TLS Protocol Version  . . . . . . . . . . . . . . . . . .   5
     3.3.  Cipher Requirements . . . . . . . . . . . . . . . . . . .   5
       3.3.1.  Mandatory Cipher Suites . . . . . . . . . . . . . . .   5
     3.4.  Authentication  . . . . . . . . . . . . . . . . . . . . .   6
       3.4.1.  PSK Identity Requirements . . . . . . . . . . . . . .   6
       3.4.2.  TLS Certificate Identity Requirements . . . . . . . .   7
   4.  TACACS+ Extended Authentication Packet Types  . . . . . . . .   7
     4.1.  The Extended Authentication START Packet Body . . . . . .   7
     4.2.  The Extension Authentication REPLY Packet Body  . . . . .   9
     4.3.  The Extended Authentication CONTINUE Packet Body  . . . .  10
   5.  SSH . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  11
     5.1.  New Enumerated TACACS+ Protocol Values and well-known
           AVPs  . . . . . . . . . . . . . . . . . . . . . . . . . .  12
     5.2.  SSH Public Key Support  . . . . . . . . . . . . . . . . .  13
     5.3.  SSH Authorization and Accounting  . . . . . . . . . . . .  15
   6.  Deprecation of TACACS+ PSK and Encryption . . . . . . . . . .  16
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  17
     7.1.  TLS . . . . . . . . . . . . . . . . . . . . . . . . . . .  17
       7.1.1.  TLS Options . . . . . . . . . . . . . . . . . . . . .  17
       7.1.2.  TLS Use . . . . . . . . . . . . . . . . . . . . . . .  17
     7.2.  Well-Known TCP/IP Port  . . . . . . . . . . . . . . . . .  17
   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  18
   9.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  18



Dahm, et al.              Expires 13 March 2022                 [Page 2]

Internet-Draft              TACACS+ Security              September 2021


   10. Normative References  . . . . . . . . . . . . . . . . . . . .  18
   11. Informative References  . . . . . . . . . . . . . . . . . . .  19
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  20

1.  Introduction

   The TACACS+ Protocol [RFC8907] provides device administration for
   routers, network access servers and other networked computing devices
   via one or more centralized servers.  The protocol provides
   authentication, authorization and accounting services for TACACS+
   clients.

   While the content of the protocol is highly sensitive, TACACS+ lacks
   modern and/or effective confidentiality, integrity, and
   authentication of the connection and network traffic between the
   server and client.  The existing mechanisms of TACACS+ are extremely
   weak and the Security Considerations section of the TACACS+ Protocol
   [RFC8907] adequately describes this.

   To address these deficiencies, this document updates the TACACS+
   Protocol [RFC8907] to use TLS 1.2 [RFC5246] and TLS 1.3 [RFC8446]
   authentication and encryption, and deprecates the use of its former
   mechanisms.

   To support SSH authentication using public keys, highly desired by
   the operator community, this document introduces a method to support
   sending public keys to a TACACS+ client, allowing centralized
   management.

   To accomplish these goals and improve security and functionality when
   a network proxy is involved in a TACACS+ connection, new and uniform
   packet formats are introduced.

2.  Technical Definitions

   The Technical Definitions section of the TACACS+ Protocol [RFC8907]
   is fully applicable here and will not be repeated, though may be
   augmented.  The following terms are also used in this document.

2.1.  AVP

   An Attribute-Value Pair or AVP is another name a TACACS+ argument as
   defined in [RFC8907] Sections 6.1 and 8.

2.2.  Empty Value

   An empty or zero-length value of an AVP as defined in [RFC8907]
   Sections 8.1.



Dahm, et al.              Expires 13 March 2022                 [Page 3]

Internet-Draft              TACACS+ Security              September 2021


2.3.  Unsecure Connection

   This is another term for a Connection as defined in TACACS+ Protocol
   [RFC8907].  It is a Connection without TLS and therefore being
   plaintext or possibly using unsecure TACACS+ authentication and
   obfuscation.

2.4.  Peer

   This refers to a TACACS+ Server or Client.

2.5.  TLS Connection

   A TLS Connection is a TCP/IP connection with TLS authentication and
   encryption used by TACACS+ for transport, similar to a Connection as
   defined in TACACS+ Protocol [RFC8907].

3.  TLS for TACACS+

   TACACS+ connections are TCP/IP connections initiated by the Client to
   the Server.  The well-known TCP/IP port 49 on the Server is used for
   unencrypted and encrypted connections as defined in the TACACS+
   Protocol [RFC8907].  A connection may be used for only a single
   Session or the multiplexing of multiple Sessions.

   It is mandatory to maintain the confidentiality, integrity, and
   authentication of these connections, as [RFC3365] dictates the need
   for end-to-end security.  The current IETF technology best suited for
   TACACS+ is TLS, which can provide both authentication and transport
   encryption.

3.1.  Well-Known TCP/IP Port

   All data exchanged by TACACS+ Peers MUST be encrypted, including the
   authentication of the Peers.  Therefore, encryption MUST be initiated
   immediately upon the establishment of the TCP/IP connection.  For
   this reason, it is desirable not to use a "STARTTLS" command process,
   a feature that some protocols, which once existed without TLS, use to
   maintain backward compatibility.  Instead, following [RFC7605], a
   different well-known system TCP/IP port is assigned by IANA, port
   [TBD], for the TLS connection.










Dahm, et al.              Expires 13 March 2022                 [Page 4]

Internet-Draft              TACACS+ Security              September 2021


3.2.  TLS Protocol Version

   XXX rfc8773 is required to have server/client certificates with PSK
   TACACS+ implementations supporting TLS MUST implement at least TLS
   version 1.3 [RFC8446] until it is deprecated.  However,
   implementations SHOULD also implement newer TLS versions as they
   emerge and MUST abandon TLS versions as they are deprecated,
   including TLS 1.3 and prior versions.

   Clearly deprecation is more difficult for Servers, because support
   for and deployment of new TLS versions to Clients will occur with
   great randomness or perhaps not at all due to End of Support (EoS).
   Therefore, it is of great value to, and implementations MAY, support
   deprecated versions to allow for gradual adoption and software at its
   End of Life (EoL).  A Server that supports deprecated versions SHOULD
   NOT enable this support except by operator configuration.

3.3.  Cipher Requirements

   XXX The IANA registry now has "Recommended" algorithms.  reference
   this for ciphers that should be supported.  As with TLS Protocol
   Versions (Section 3.2), TACACS+ implementations MUST adopt and
   deprecate new cipher suites as they emerge or fade and MAY support
   deprecated cipher suites.  However, cipher suites is a far more
   complex subject because those chosen directly affect the
   effectiveness of the confidentiality, integrity, and authentication
   of TLS, the processing required, and the types of authentication
   available.

   TACACS+ Servers supporting TLS MUST utilize the TLS encryption
   options described in the following sections.  XXX but should be
   allowed to evolve as TLS does.

3.3.1.  Mandatory Cipher Suites

   TLS 1.2 [RFC5246] allows specifying application profiles prescribing
   which cipher suites to implement for interoperability purposes.  To
   maintain simplicity of current TACACS+ configuration using pre-shared
   secrets, the server implementation MUST implement:

   1.  TLS-DHE-PSK-WITH-AES-128-GCM-SHA256

   2.  TLS_DHE_PSK_WITH_AES_128_CBC_SHA

   3.  TLS_DHE_PSK_WITH_AES_256_CBC_SHA

   A Client MUST implement at least one of the cipher suites which are
   implemented on the Server, and MAY implement all of them.



Dahm, et al.              Expires 13 March 2022                 [Page 5]

Internet-Draft              TACACS+ Security              September 2021


   Both Clients and Servers MAY implement other cipher suites, but their
   interoperability is not guaranteed and their implementation is
   outside of scope of this document.  XXX again; should allow a way to
   evolve.  how??? XXX russ housley says: Section 3.3.1: Do you want to
   provide any guidance for TLS 1.3?  I would say something like: if TLS
   1.2 is used, then one of the following ciphersuites MUST be used ...
   if TLS 1.3 is used, then one of the following ciphersuites MUST be
   used ...  This is not ideal for the evolution part, but you might
   say: if a version beyond TLS 1.3 is used, then one of the
   ciphersuites that i s marked as "Recommended" MUST be used ... XXX

3.4.  Authentication

   XXX TLS authentication can occur via asymmetric cryptography or
   Edwards-Curve Digital Signature Algorithm, or various forms of
   symmetric pre-shared-key (PSK). we only consider out of band PSK.
   KDF hash algorithm needs to be specified?  PSK can only be assoc with
   one HKDF in tls1.3 RPKs - https://tools.ietf.org/html/rfc7250

3.4.1.  PSK Identity Requirements

   See rfc 8446 s2.2 regarding PSK secret choice Because determining a
   correct PSK value on the server side is a computationally intensive
   operation requiring multiple round trips, a mechanism for hitless key
   change must be defined.  During TLS handshake, a client MUST use PSK
   identity as defined in [RFC4279] to signal to the server which PSK
   value to use.  If server does not recognize PSK identity it MUST
   respond with decrypt_error alert and MUST NOT respond with
   unknown_psk_identity.

   Process to change pre-shared keys on server and client is then:

   1.  Add new key with new PSK identity on the server.

   2.  Add new key with new PSK identity on the client.

   3.  Remove old key with old PSK identity from the client.

   4.  Remove old key with old PSK identity from the server.

   XXX reference "key life" in rfc8645 ???

   Note: PSK identity is transmitted in clear text and must not contain
   information which could aid an attacker who can eavesdrop on the
   connection.






Dahm, et al.              Expires 13 March 2022                 [Page 6]

Internet-Draft              TACACS+ Security              September 2021


3.4.2.  TLS Certificate Identity Requirements

   XXX

4.  TACACS+ Extended Authentication Packet Types

   Versions 1 and 2 of the TACACS+ Protocol, as defined in [RFC8907],
   specify the TACACS+ Authentication Packets for START, REPLY and
   CONTINUE which support the credential validation use case but does
   not accommodate any further arguments which may be used to give
   context to the request.

   One use-case where this shortcoming inhibits correct operation is for
   the TACACS+ proxy.  Because the originating client is not encoded in
   the regular Authentication START Packet, TACACS+ Servers generally
   attempt to determine the client from the TCP connection.  This is
   effective only for the first step: proxied TACACS+ servers can no
   longer securely enforce policy based upon the end client IP-Address.

   Further, advanced use cases (such as SSH key distribution) would
   otherwise rely on embedding structured information into the single
   data fields, obfuscating the content of the protocol.

   To support these use cases, and allow clients to add environment
   information to the request, the Extended Authentication Packets
   brings the Authentication phase of the protocol inline with the
   Authorization and Accounting Phase by incorporating extensible
   argument s.

   The server should expect Extended Authentication Packet Bodies if the
   minor version in the Packet Header is: 0x2

4.1.  The Extended Authentication START Packet Body


















Dahm, et al.              Expires 13 March 2022                 [Page 7]

Internet-Draft              TACACS+ Security              September 2021


    1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
   +----------------+----------------+----------------+----------------+
   |    action      |    priv_lvl    |  authen_type   | authen_service |
   +----------------+----------------+----------------+----------------+
   |    user_len    |    port_len    |  rem_addr_len  |    data_len    |
   +----------------+----------------+----------------+----------------+
   |    arg_cnt                                                        |
   +----------------+----------------+----------------+----------------+
   |    arg_1_len                                                      |
   +----------------+----------------+----------------+----------------+
   |      ...                                                          |
   +----------------+----------------+----------------+----------------+
   |    arg_N_len                                                      |
   +----------------+----------------+----------------+----------------+
   |    user ...
   +----------------+----------------+----------------+----------------+
   |    port ...
   +----------------+----------------+----------------+----------------+
   |    rem_addr ...
   +----------------+----------------+----------------+----------------+
   |    data...
   +----------------+----------------+----------------+----------------+
   |    arg_1 ...
   +----------------+----------------+----------------+----------------+
   |    arg_2 ...
   +----------------+----------------+----------------+----------------+
   |    ...
   +----------------+----------------+----------------+----------------+
   |    arg_N ...
   +----------------+----------------+----------------+----------------+

                                  Figure 1

   The action, priv_level, authen_type, authen_service, user_len,
   port_len, rem_addr_len, data_len, user, port, rem_addr and data
   fields are used exactly as defined in the Authentication START Packet
   Body in [RFC8907].

   The following fields contain the arguments that may be used to extend
   the authentication process.  These are common to the Extended
   Authentication START, Extended Authentication REPLY, and Extended
   Authentication CONTINUE packet bodies; these fields represent the
   sole update from the previous START, REPLY and CONTIMUE packet
   bodies.

   The new fields are as follows:

   arg_cnt



Dahm, et al.              Expires 13 March 2022                 [Page 8]

Internet-Draft              TACACS+ Security              September 2021


   This represents the number of arguments in the packet.

   arg_1_len ... arg_N_len, arg_1 ... arg_N

   Each argument is encoded in the packet as a single arg field (arg_1
   ... arg_N) with a corresponding length field that indicates the
   length of each argument in bytes.

   The arguments are argument-value pairs.  The argument and the value
   are in a single string and are separated by either a "=" (0X3D) or a
   "*" (0X2A).  The equals sign indicates a mandatory argument.  The
   asterisk indicates an optional one.  For the rules regarding optional
   and mandatory arguments, refer to [RFC8907]

   The addition of arguments to the authentication packets is intended
   to permit the flexibility for TACACS+ phase that has been available
   previously for authorization and accounting.  These fields are
   intended to be used as needed in deployment, they are used in this
   document in the enhancments for SSH (Section 5), and to support the
   origin client to enhance TACACS+ Proxy:

   origin_client

   The IP-Address of the originating TACACS+ client.  This is text
   encoded in line with the rest of the TACACS+ protocol, and may be
   IPv4 or IPv6.  This argument is optional.  IPv4 addresses are
   specified as octet numeric values separated by dots ('.').  IPv6
   address text representation is defined in [RFC5952].

4.2.  The Extension Authentication REPLY Packet Body

   The TACACS+ server sends only one type of extended authentication
   packet to the client.


















Dahm, et al.              Expires 13 March 2022                 [Page 9]

Internet-Draft              TACACS+ Security              September 2021


    1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
   +----------------+----------------+----------------+----------------+
   |     status     |      flags     |        server_msg_len           |
   +----------------+----------------+----------------+----------------+
   |           data_len              |
   +----------------+----------------+----------------+----------------+
   |    arg_cnt                                                        |
   +----------------+----------------+----------------+----------------+
   |    arg_1_len                                                      |
   +----------------+----------------+----------------+----------------+
   |      ...                                                          |
   +----------------+----------------+----------------+----------------+
   |    arg_N_len                                                      |
   +----------------+----------------+----------------+----------------+
   |    data ...
   +----------------+----------------+----------------+----------------+
   |    server_msg ...
   +----------------+----------------+----------------+----------------+
   |    arg_1 ...
   +----------------+----------------+----------------+----------------+
   |    arg_2 ...
   +----------------+----------------+----------------+----------------+
   |    ...
   +----------------+----------------+----------------+----------------+
   |    arg_N ...
   +----------------+----------------+----------------+----------------+

                                  Figure 2

   The status, flags, server_msg_len, data_len, server_msg, and data
   fields are used exactly as defined in the Authentication REPLY Packet
   Body in [RFC8907]].

   The new arg_cnt, arg_1 ... arg_N, and arg_1_len .... arg_N_len fields
   are used as defined in The Extended Authentication START Packet Body
   (Section 4.1).

4.3.  The Extended Authentication CONTINUE Packet Body

   This packet is sent from the client to the server following the
   receipt of an Extended REPLY packet.










Dahm, et al.              Expires 13 March 2022                [Page 10]

Internet-Draft              TACACS+ Security              September 2021


    1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
   +----------------+----------------+----------------+----------------+
   |          user_msg len           |            data_len             |
   +----------------+----------------+----------------+----------------+
   |     flags      |                                                  |
   +----------------+----------------+----------------+----------------+
   |    arg_cnt                                                        |
   +----------------+----------------+----------------+----------------+
   |    arg_1_len                                                      |
   +----------------+----------------+----------------+----------------+
   |      ...                                                          |
   +----------------+----------------+----------------+----------------+
   |    arg_N_len                                                      |
   +----------------+----------------+----------------+----------------+
   |  user_msg ...
   +----------------+----------------+----------------+----------------+
   |    data ...
   +----------------+----------------+----------------+----------------+
   |    arg_1 ...
   +----------------+----------------+----------------+----------------+
   |    arg_2 ...
   +----------------+----------------+----------------+----------------+
   |    ...
   +----------------+----------------+----------------+----------------+
   |    arg_N ...
   +----------------+----------------+----------------+----------------+

                                  Figure 3

   The user_msg len, data_len, flags, user_msg, and data fields are used
   exactly as defined in the Authentication REPLY Packet Body in
   [RFC8907].

   The new arg_cnt, arg_1 ... arg_N, and arg_1_len .... arg_N_len fields
   are used as defined in The Extended Authentication START Packet Body
   (Section 4.1).

5.  SSH

   Most network equipment now support SSH [RFC4251] for Command Line
   Interface (CLI) and Netconf [RFC6242].  Operators SHOULD use SSH
   public keys for authentication.  Some devices support public keys in
   native configuration, but there is desire to centrally manage keys
   and SSH subsystem authorization.







Dahm, et al.              Expires 13 March 2022                [Page 11]

Internet-Draft              TACACS+ Security              September 2021


5.1.  New Enumerated TACACS+ Protocol Values and well-known AVPs

   The following new enumerated TACACS+ protocol values and well-known
   AVPs are needed to support SSH in the subsequent sections.  These new
   values augment those in [RFC8907] Sections 5.1 - 5.3, 6.1, and 8.2 as
   follows:

   TAC_PLUS_AUTHEN_TYPE_SSHPK := 0x07
      Extended Authentication START Packet authen_type for SSH pubkeys.

   TAC_PLUS_AUTHEN_STATUS_GETSSHPKTYPE := 0x22
      Extended Authentication REPLY Packet status to solicit SSH pubkey
      type.

   TAC_PLUS_AUTHEN_STATUS_SSHPK := 0x23
      Extended Authentication REPLY Packet status to provide SSH
      pubkeys.

   TAC_PLUS_REPLY_FLAG_FRAGMENT := 0x02
      Extended Authentication REPLY Packet flag indicating the REPLY is
      incomplete.

   TAC_PLUS_CONTINUE_FLAG_FRAGMENT := 0x02
      Extended Authentication CONTINUE Packet flag requesting the next
      REPLY packet of an incomplete REPLY.

   TAC_PLUS_CONTINUE_FLAG_PASS := 0x04
      Extended Authentication CONTINUE Packet flag indicating
      authentication success.

   TAC_PLUS_CONTINUE_FLAG_FAIL := 0x08
      Extended Authentication CONTINUE Packet flag indicating
      authentication failure.

   TAC_PLUS_CONTINUE_FLAG_ERROR := 0x10
      Extended Authentication CONTINUE Packet flag indicating
      authentication error.

   AVP ssh_pubkey_type (String)
      Attribute to carry SSH public key type names.

   AVP ssh_pubkey (String)
      Attribute to carry SSH public keys.

   TAC_PLUS_AUTHEN_METH_SSHPK := 0x21
      Authorization REQUEST Packet authen_method for SSH pubkey
      authentication.




Dahm, et al.              Expires 13 March 2022                [Page 12]

Internet-Draft              TACACS+ Security              September 2021


   AVP ssh-subsystem (String)
      Attribute to carry SSH subsystem name for authorization

5.2.  SSH Public Key Support

   To support central management of SSH public keys via TACACS+, the
   Authentication sequence of [RFC8907] Section 5.4 is extended using
   Extended Authenication Packet (Section 4) sequences to deliver SSH
   public keys to devices for local verification.

   Besides new header values and flags and AVPs for Extended
   Authentication Packets, the SSH public key authentication process
   differs from other TACACS+ authentication types in that there may be
   more Authentication Reply and Authentication Continue Packets pairs
   than previously.

   The process follows:

   1.  The client begins an authentication session with an Extended
       Authentication START Packet.  The START packet MUST include a
       non-zero-length username and the server MUST send an
       Authentication REPLY Packet with status
       TAC_PLUS_AUTHEN_STATUS_ERROR, if the client fails to do so.  The
       client MAY include one or more instances of the ssh_pubkey_type
       AVP, indicating the SSH public key types that it wants.  The set
       of permissible values for this AVP are the SSH public algorithm
       names in the IANA pubkey alg names registry, [SSHPARAM].  The
       server MUST NOT reply with status TAC_PLUS_AUTHEN_STATUS_ERROR if
       it receives an algorithm name that it does not recognize.  If the
       client marks a ssh_pubkey_type AVP as mandatory, the server MUST
       reply with at least one key of that type for the given user or
       reply with status TAC_PLUS_AUTHEN_STATUS_SSHNOPK with the
       relevant AVP.  The client MAY send an empty algorithm name to
       request all type available for the given user.  The process ends
       and the client MUST start a new authentication session if it
       receives status SSHNOPK or ERROR.

   2.  If a ssh_pubkey_type AVP was not provided in the START packet,
       the server replies with the status code
       TAC_PLUS_AUTHEN_STATUS_GETSSHPKTYPE.  The client MUST send a
       CONTINUE packet with one or more ssh_pubkey_type AVPs, else the
       server sends a REPLY packet with status
       TAC_PLUS_AUTHEN_STATUS_ERROR.

   3.  If the server has none of the wanted ssh_pubkey_type(s) or any of
       the mandatory ssh_pubkey_types for the user or no pubkeys at all,
       the server MUST send a REPLY packet with status
       TAC_PLUS_AUTHEN_STATUS_SSHNOPKi with the relevant ssh_pubkey_type



Dahm, et al.              Expires 13 March 2022                [Page 13]

Internet-Draft              TACACS+ Security              September 2021


       AVP(s).  The process ends and the client MUST start a new
       authentication session if it receives status SSHNOPK or ERROR.

       XXX does it need to mention all cases where a new session is
       required?

   4.  The server send REPLY packets with status
       TAC_PLUS_AUTHEN_STATUS_SSHPK and includes one or more ssh_pubkey
       optional AVPs.  The ssh_pubkey AVPs are formatted according to
       the rules of SSH Public Key File Format [RFC4716]; one key per
       AVP.  As such, client MUST be prepared to accept Key File
       Headers.  Since it is possible to have more ssh_pubkey AVPs than
       fit in a REPLY packet, the server SHOULD set the REPLY packet
       flag TAC_PLUS_REPLY_FLAG_FRAGMENT if two or more packets are
       required, indicating that the client SHOULD request the
       remainder.  An AVP SHALL NOT span multiple packet; each must be
       contained entirely in the packet in which it begins.

       XXX is optional correct for the ssh_pubkey AVP?
       XXX is rfc4716 format the best choice?
       XXX should an AVP be allowed to span multiple packets?  ie: that
       the packet payload should be concatenated.  This has implications
       for more than just ssh pubkeys.  We decided no; Douglas will add
       text.

   5.  If the TAC_PLUS_REPLY_FLAG_FRAGMENT flag is set, the client MAY
       reply with the same CONTINUE packet as before with the new
       TAC_PLUS_CONTINUE_FLAG_FRAGMENT flag set.  The server replies
       with the next REPLY packet as before, clearing the
       TAC_PLUS_REPLY_FLAG_FRAGMENT flag of the last REPLY packet.  This
       repeats until the last REPLY packet is received, the client
       aborts the authentication process, or an error occurs.  The
       client MUST NOT set TAC_PLUS_REPLY_FLAG_FRAGMENT if the REPLY
       packet did not have the TAC_PLUS_REPLY_FLAG_FRAGMENT flag set and
       the server MUST reply with TAC_PLUS_AUTHEN_STATUS_ERROR if it
       does so.

   6.  Once the client has all of the pubkeys, it performs the ssh
       pubkey authentication with its ssh client.  The client MUST then
       reply to the server with the status of that authentication by
       sending a CONTINUE packet with one of the following new or
       existing CONTINUE flags: TAC_PLUS_CONTINUE_FLAG_ABORT,
       TAC_PLUS_CONTINUE_FLAG_PASS, TAC_PLUS_CONTINUE_FLAG_FAIL, or
       TAC_PLUS_CONTINUE_FLAG_ERROR.







Dahm, et al.              Expires 13 March 2022                [Page 14]

Internet-Draft              TACACS+ Security              September 2021


   7.  The client must give the server the final consent, by waiting for
       a REPLY packet with one of the status:
       TAC_PLUS_AUTHEN_STATUS_PASS, TAC_PLUS_AUTHEN_STATUS_FAIL, or
       TAC_PLUS_AUTHEN_STATUS_ERROR, thus ending the authentication
       session.

5.3.  SSH Authorization and Accounting

   To support central management of SSH and SSH subsystem authorization
   and accounting via TACACS+, this document adds a new authen_method to
   RFC8907 Section 6.1 Authorization REQUEST [RFC8907] and a well-known
   AVP to Section 8.2 Authorization Arguments [RFC8907].

   The new authen_method TAC_PLUS_AUTHEN_METH_SSHPUBKEY indicates that
   the user was authenticated with a SSH public key.

   XXX This where an TAC_PLUS_AUTHEN_SVC_SSH, as opposed to
   TAC_PLUS_AUTHEN_SVC_LOGIN, might be sensible.  Perhaps only for
   _SVC_SSHSUBSYS??  Is the type of auth interesting for authorization?

   The new well-known ssh-subsystem AVP defines the SSH subsystem for
   which the authorization is requested and MUST be present if the
   authen_method is TAC_PLUS_AUTHEN_METH_SSHPUBKEY and SHOULD be present
   any time the authorization is for a SSH connection.

   The set of permissible values for this AVP are the SSH Subsystem
   Names defined in the IANA SSH Connection Protocol Subsystem Names
   Registry [SSHSUBSYS], which are case-sensitive as specified and
   otherwise constrained by [RFC4250] Section 4.6.1.  The client MAY
   send an empty subsystem name to indicate no subsystem, also known as
   a shell or CLI.  The server MUST NOT reply with status
   TAC_PLUS_AUTHOR_STATUS_ERROR if it receives a subsystem name whose
   syntax is valid but whose value is not recognized.


















Dahm, et al.              Expires 13 March 2022                [Page 15]

Internet-Draft              TACACS+ Security              September 2021


   These new authen_methods and AVPs apply equally to accounting.

   XXX what if the _AUTHEN_METH_ is not _SSHPUBKEY, perhaps just _LOCAL;
   the subsystem is still relevant.  is a _SVC_SSH needed?

   XXX is the "ssh subsystem" AVP for authorization a bad idea?

   XXX are any other AVPs or text needed to describe authorization for
   the existing registered subsystems?  do they need anything
   specifically or generally to support authorization for them?  Perhaps
   any such text should be a separate per-subsys draft?

   XXX why is sftp missing from the registered subsystem list?

   XXX add netconf_acct or ssh_subsystem_acct accounting "event" type?
   or ssh subsystem name with "_acct" postfix?

6.  Deprecation of TACACS+ PSK and Encryption

   The TACACS+ Protocol [RFC8907] specified a form of encryption and
   Peer authentication using a pre-shared key that is wholly inadequate
   by modern standards and is diminutively referred to as data
   obfuscation.  The introduction of TLS PSK and certificate Peer
   authentication and TLS encryption to TACACS+ obsolesces these former
   mechanisms and so are hereby deprecated.

   Along with them, the TAC_PLUS_UNENCRYPTED_FLAG flag in the TACACS+
   header, the least significant bit (LSB) of the flags field, is also
   deprecated.  Peers compliant with this document should set the
   TAC_PLUS_UNENCRYPTED_FLAG flag in the Packet Header of packets on TLS
   Connections, indicating that the data obfuscation is not used.  A
   Peer that receives a Packet without the flag set on a TLS Connection,
   should immediately log the error and terminate the TCP/IP connection.

   A Client that is compliant with this document MUST NOT utilize these
   deprecated authentication or encryption methods on TLS Connections/

   A TACACS+ Server or Client implementation SHOULD, and is strongly
   encouraged to, offer a configuration mechanism to disable non-TLS
   connections entirely.

   A future document SHOULD be written to deprecate the well-known TCP/
   IP port 49, allocated by the TACACS+ Protocol [RFC8907].

   XXX Anything else to deprecate?  We had discussed deprecation of MS-
   CHAP v1. ????





Dahm, et al.              Expires 13 March 2022                [Page 16]

Internet-Draft              TACACS+ Security              September 2021


7.  Security Considerations

7.1.  TLS

   This document improves the confidentiality, integrity, and
   authentication of the connection and network traffic between the
   TACACS+ Peers by adding TLS support.  This does not in itself protect
   the server nor clients; the operator and equipment vendors have a
   role.  That role is to diligently follow current best practices for
   maintaining the integrity of network devices and selection of TLS key
   and encryption algorithms.

7.1.1.  TLS Options

   It is not and never will be reasonable to expect RFCs be updated in
   perpetuity as each new TLS version and/or algorithm emerges nor at a
   rate to keep pace.  It would be highly desirable for the TLS working
   group to publish a single document, that evolves with TLS and its
   algorithms, which RFCs using TLS, such as this one, could reference
   without the need to update those RFCs, thus allowing them to evolve
   by inheri tance.  As no such document exists, implementers and
   operators SHOULD make informed use of RFCs to determine which TLS
   versions and algorithms should be supported, deprecated, or
   abandoned, in the absence of updates to this RFC.

7.1.2.  TLS Use

   TLS encryption SHOULD be used in deployments when both the clients
   and servers support it.  Servers that support TLS encryption MAY be
   configured to allow Unsecure Connections when TLS encryption is not
   supported by the client, but this is NOT RECOMMENDED because of the
   threat of downgrade attacks, as described in Section 7.2.  Unsecure
   Connections would be better served by separate Servers from the TLS
   Servers.

   It is NOT RECOMMENDED to deploy TACACS+ without TLS authentication
   and encryption, except for test and debug environments.

7.2.  Well-Known TCP/IP Port

   A new port is considered appropriate and superior to a "STARTTLS"
   command because it allows:

   *  ease of blocking the unencrypted or inferiorly encrypted
      connections by the TCP/IP port number,

   *  passive Intrusion Detection Systems (IDSs) monitoring the
      unencrypted version to be unaffected by the introduction of TLS,



Dahm, et al.              Expires 13 March 2022                [Page 17]

Internet-Draft              TACACS+ Security              September 2021


   *  avoidance of Man in the Middle (MitM) attacks that can interfere
      with STARTTLS,

   *  and helps prevent the accidental exposure of sensitive information
      due to misconfiguration.

   However, co-existence of inferior authentication and encryption,
   whether an Unsecure Connection or deprecated parts that compose TLS,
   also presents opportunity for down-grade attacks.  Causing failure of
   connections to the TLS-enabled service or the negotiation of shared
   algorithm support are two such down-grade attacks.  The simplest way
   to address the exposure from Unsecure Connection methods is to refuse
   Unsecure Connections at the server entirely, perhaps using separate
   servers for Unsecure Connections and TLS.  Another approach is mutual
   configuration that requires TLS.  Clients and servers SHOULD support
   configuration that requires Peers, globally and individually, use
   TLS.  Furthermore, Peers SHOULD be configurable to limit offered or
   recognized TLS versions and algorithms to those recommended by
   standards bodies and implementers.

   Servers and clients could also maintain a cache of Peers that have
   engaged in TACACS+ TLS connections and demand TLS from that point
   forward.  However, this has potential to be a Denial of Service (DoS)
   vector, whereby an attacker causes a sever to believe that a client
   that does not support TLS has successfully connected with TLS.

8.  IANA Considerations

   The authors request that, when this draft is accepted by the working
   group, the OPSAWG Chairs submit a request to IANA for an early
   allocation, per [RFC4020] and [RFC6335], of a new well-known system
   TCP/IP port number for "tacacss", described as "TACACS+ over TLS".
   The name "tacacss" follows the common practice of appending an "s" to
   the name given to the non-TLS well-known port.  This allocation is
   justified in Section 7.2.

   RFC EDITOR: this port number should replace "[TBD]" within this
   document.

9.  Acknowledgments

   The author(s) would like to thank Russ Housley, Steven M.  Bellovin,
   Stephen Farrell, Alan DeKok, and Tom Petch for their support,
   insightful review, and/or comments.

10.  Normative References





Dahm, et al.              Expires 13 March 2022                [Page 18]

Internet-Draft              TACACS+ Security              September 2021


   [BCP14]    Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

              Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, May 2017.

              <https://www.rfc-editor.org/bcp/bcp14.txt>

   [RFC4250]  Lehtinen, S. and C. Lonvick, Ed., "The Secure Shell (SSH)
              Protocol Assigned Numbers", RFC 4250,
              DOI 10.17487/RFC4250, January 2006,
              <https://www.rfc-editor.org/info/rfc4250>.

   [RFC4279]  Eronen, P., Ed. and H. Tschofenig, Ed., "Pre-Shared Key
              Ciphersuites for Transport Layer Security (TLS)",
              RFC 4279, DOI 10.17487/RFC4279, December 2005,
              <https://www.rfc-editor.org/info/rfc4279>.

   [RFC4716]  Galbraith, J. and R. Thayer, "The Secure Shell (SSH)
              Public Key File Format", RFC 4716, DOI 10.17487/RFC4716,
              November 2006, <https://www.rfc-editor.org/info/rfc4716>.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008,
              <https://www.rfc-editor.org/info/rfc5246>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

   [RFC8907]  Dahm, T., Ota, A., Medway Gash, D.C., Carrel, D., and L.
              Grant, "The Terminal Access Controller Access-Control
              System Plus (TACACS+) Protocol", RFC 8907,
              DOI 10.17487/RFC8907, September 2020,
              <https://www.rfc-editor.org/info/rfc8907>.

   [SSHPARAM] IANA, "SSH Protocol Parameters",
              <https://www.iana.org/assignments/ssh-parameters/ssh-
              parameters.xhtml>.

   [SSHSUBSYS]
              IANA, "SSH Protocol Subsystem Names",
              <https://www.iana.org/assignments/ssh-parameters/ssh-
              parameters.xhtml#ssh-parameters-15>.

11.  Informative References




Dahm, et al.              Expires 13 March 2022                [Page 19]

Internet-Draft              TACACS+ Security              September 2021


   [RFC3365]  Schiller, J., "Strong Security Requirements for Internet
              Engineering Task Force Standard Protocols", BCP 61,
              RFC 3365, DOI 10.17487/RFC3365, August 2002,
              <https://www.rfc-editor.org/info/rfc3365>.

   [RFC4020]  Kompella, K. and A. Zinin, "Early IANA Allocation of
              Standards Track Code Points", RFC 4020,
              DOI 10.17487/RFC4020, February 2005,
              <https://www.rfc-editor.org/info/rfc4020>.

   [RFC4251]  Ylonen, T. and C. Lonvick, Ed., "The Secure Shell (SSH)
              Protocol Architecture", RFC 4251, DOI 10.17487/RFC4251,
              January 2006, <https://www.rfc-editor.org/info/rfc4251>.

   [RFC6242]  Wasserman, M., "Using the NETCONF Protocol over Secure
              Shell (SSH)", RFC 6242, DOI 10.17487/RFC6242, June 2011,
              <https://www.rfc-editor.org/info/rfc6242>.

   [RFC6335]  Cotton, M., Eggert, L., Touch, J., Westerlund, M., and S.
              Cheshire, "Internet Assigned Numbers Authority (IANA)
              Procedures for the Management of the Service Name and
              Transport Protocol Port Number Registry", BCP 165,
              RFC 6335, DOI 10.17487/RFC6335, August 2011,
              <https://www.rfc-editor.org/info/rfc6335>.

   [RFC7605]  Touch, J., "Recommendations on Using Assigned Transport
              Port Numbers", BCP 165, RFC 7605, DOI 10.17487/RFC7605,
              August 2015, <https://www.rfc-editor.org/info/rfc7605>.

Authors' Addresses

   Thorsten Dahm

   Email: thorsten.dahm@gmail.com


   Douglas Gash
   Cisco Systems, Inc.

   Email: dcmgash@cisco.com


   Andrej Ota

   Email: andrej@ota.si






Dahm, et al.              Expires 13 March 2022                [Page 20]
