<?xml version='1.0' encoding='utf-8'?>  <!-- -*- indent-with-tabs: 0 -*- -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<rfc docName="xml2rfc-docs-3.9.1"
     category="info"
     ipr="trust200902"
     submissionType='IETF'
     consensus="true"
     updates="RFC8097" 
     xmlns:xi="http://www.w3.org/2001/XInclude" version="3"
     sortRefs="true"
     indexInclude="false"
     tocDepth="3">


   <front>
     <title abbrev="TACACS+ Security">
            TACACS+ Security, TLS, and SSH Public Keys
     </title>
     <author fullname="Thorsten Dahm" initials="T." surname="Dahm">
       <address>
         <postal>
           <street></street>
           <code></code>
           <city></city>
           <country></country>
         </postal>
         <email>thorsten.dahm@gmail.com</email>
       </address>
     </author>
        
     <author fullname="Douglas Gash" initials="D." surname="Gash">
       <organization>Cisco Systems, Inc.</organization>
       <address>
         <postal>
           <street></street>
           <code></code>
           <city></city>
           <country></country>
         </postal>
         <email>dcmgash@cisco.com</email>
       </address>
     </author>
      
     <author fullname="Andrej Ota" initials="A." surname="Ota">
       <address>
         <postal>
           <street></street>
           <code></code>
           <city></city>
           <country></country>
         </postal>
         <email>andrej@ota.si</email>
       </address>
     </author>

     <date />
     <area>Operations and Management Area (ops)</area>
     <workgroup>Operations and Management Area Working Group</workgroup>

     <keyword>TACACS+</keyword>

     <abstract>
     <t>
       The <xref target="RFC8907">TACACS+ Protocol</xref> provides device administration for routers, network access servers and other networked computing devices via one or more centralized servers.
       This document, a companion to the <xref target="RFC8907">TACACS+ protocol</xref>, adds new packet formats to improve security and function, Transport Layer Security (currently defined by <xref target="RFC5246">TLS 1.2</xref> and <xref target="RFC8446">TLS 1.3</xref>) support, and support for <xref target="RFC4716">SSH</xref> public keys and deprecates former inferior security mechanisms.
     </t>
     </abstract>
     <note title="Requirements Language">
       <t>
         The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="BCP14"/> when, and only when, they appear in all capitals, as shown here.
       </t>
     </note>
   </front>

   <middle>
     <section title="Introduction">
       <t>
         The <xref target="RFC8907">TACACS+ Protocol</xref> provides device administration for routers, network access servers and other networked computing devices via one or more centralized servers.
         The protocol provides authentication, authorization and accounting services for TACACS+ clients.
       </t>
       <t>
	 While the content of the protocol is highly sensitive, TACACS+ lacks modern and/or effective confidentiality, integrity, and authentication of the connection and network traffic between the server and client.
	 The existing mechanisms of TACACS+ are extremely weak and the Security Considerations section of the <xref target="RFC8907">TACACS+ Protocol</xref> adequately describes this.
       </t>
       <t>
	 To address these deficiencies, this document updates the <xref target="RFC8907">TACACS+ Protocol</xref> to use <xref target="RFC5246">TLS 1.2</xref> and <xref target="RFC8446">TLS 1.3</xref> authentication and encryption, and deprecates the use of its former mechanisms.
       </t>
       <t>
	 To support SSH authentication using public keys, highly desired by the operator community, this document introduces a method to support sending public keys to a TACACS+ client, allowing centralized management.
       </t>
       <t>
	 To accomplish these goals and improve security and functionality when a network proxy is involved in a TACACS+ connection, new and uniform packet formats are introduced.
       </t>
     </section>

     <section title="Technical Definitions">
       <t>
         The Technical Definitions section of the <xref target="RFC8907">TACACS+ Protocol</xref> is fully applicable here and will not be repeated, though may be augmented.
         The following terms are also used in this document.
       </t>
       <section title="AVP">
         <t>
           An Attribute-Value Pair or AVP is another name a TACACS+ argument as defined in <xref target="RFC8907"/> Sections 6.1 and 8.
         </t>
       </section>
       <section title="Empty Value">
         <t>
           An empty or zero-length value of an AVP as defined in <xref target="RFC8907"/> Sections 8.1.
         </t>
       </section>
       <section title="Unsecure Connection">
         <t>
           This is another term for a Connection as defined in <xref target="RFC8907">TACACS+ Protocol</xref>.
           It is a Connection without TLS and therefore being plaintext or possibly using unsecure TACACS+ authentication and obfuscation.
         </t>
       </section>
       <section title="Peer">
         <t>
           This refers to a TACACS+ Server or Client.
         </t>
       </section>
       <section title="TLS Connection">
         <t>
           A TLS Connection is a TCP/IP connection with TLS authentication and encryption used by TACACS+ for transport, similar to a Connection as defined in <xref target="RFC8907">TACACS+ Protocol</xref>.
         </t>
       </section>
     </section>

     <section title="TLS for TACACS+">
       <t>
         TACACS+ connections are TCP/IP connections initiated by the Client to the Server.
         The well-known TCP/IP port 49 on the Server is used for unencrypted and encrypted connections as defined in the <xref target="RFC8907">TACACS+ Protocol</xref>.
         A connection may be used for only a single Session or the multiplexing of multiple Sessions.
       </t>
       <t>
                It is mandatory to maintain the confidentiality, integrity, and authentication of these connections, as <xref target="RFC3365"/> dictates the need for end-to-end security.
                The current IETF technology best suited for TACACS+ is TLS, which can provide both authentication and transport encryption.
       </t>
       <section title="Well-Known TCP/IP Port">
            <t>
                All data exchanged by TACACS+ Peers MUST be encrypted, including the authentication of the Peers.
                Therefore, encryption MUST be initiated immediately upon the establishment of the TCP/IP connection.
                For this reason, it is desirable not to use a "STARTTLS" command process, a feature that some protocols, which once existed without TLS, use to maintain backward compatibility.
                Instead, following <xref target="RFC7605"/>, a different well-known system TCP/IP port is assigned by IANA, port [TBD], for the TLS connection.
            </t>
       </section>
       <section title="TLS Protocol Version" anchor="TLSProtoVers">
            <t>
XXX rfc8773 is required to have server/client certificates with PSK
                TACACS+ implementations supporting TLS MUST implement at least <xref target="RFC8446">TLS version 1.3</xref> until it is deprecated.
                However, implementations SHOULD also implement newer TLS versions as they emerge and MUST abandon TLS versions as they are deprecated, including TLS 1.3 and prior versions.
            </t>
            <t>
                Clearly deprecation is more difficult for Servers, because support for and deployment of new TLS versions to Clients will occur with great randomness or perhaps not at all due to End of Support (EoS).
                Therefore, it is of great value to, and implementations MAY, support deprecated versions to allow for gradual adoption and software at its End of Life (EoL).
                A Server that supports deprecated versions SHOULD NOT enable this support except by operator configuration.
            </t>
       </section>
       <section title="Cipher Requirements">
            <t>
XXX The IANA registry now has "Recommended" algorithms.  reference this for ciphers that should be supported.
                As with <xref target="TLSProtoVers">TLS Protocol Versions</xref>, TACACS+ implementations MUST adopt and deprecate new cipher suites as they emerge or fade and MAY support deprecated cipher suites.
                However, cipher suites is a far more complex subject because those chosen directly affect the effectiveness of the confidentiality, integrity, and authentication of TLS, the processing required, and the types of authentication available.
            </t>
            <t>
                TACACS+ Servers supporting TLS MUST utilize the TLS encryption options described in the following sections.

XXX but should be allowed to evolve as TLS does.

            </t>
                <section title="Mandatory Cipher Suites">
                <t>
                <xref target="RFC5246">TLS 1.2</xref> allows specifying application profiles prescribing which cipher suites to implement for interoperability purposes.
                To maintain simplicity of current TACACS+ configuration using pre-shared secrets, the server implementation MUST implement:
                </t>
                <ol>
                <li>TLS-DHE-PSK-WITH-AES-128-GCM-SHA256</li>
                <li>TLS_DHE_PSK_WITH_AES_128_CBC_SHA</li>
                <li>TLS_DHE_PSK_WITH_AES_256_CBC_SHA</li>
                </ol>
                <t>
                A Client MUST implement at least one of the cipher suites which are implemented on the Server, and MAY implement all of them.
                </t>
                <t>
                Both Clients and Servers MAY implement other cipher suites, but their interoperability is not guaranteed and their implementation is outside of scope of this document.
                XXX again; should allow a way to evolve.  how???
XXX russ housley says:
        Section 3.3.1: Do you want to provide any guidance for TLS 1.3?  I would say something like:

        if TLS 1.2 is used, then one of the following ciphersuites MUST be used
        ...

        if TLS 1.3 is used, then one of the following ciphersuites MUST be used
        ...

        This is not ideal for the evolution part, but you might say:

        if a version beyond TLS 1.3 is used, then one of the ciphersuites that i
s marked as "Recommended" MUST be used ...
XXX
                </t>
                </section>
       </section>
       <section title="Authentication">
            <t>
XXX
TLS authentication can occur via asymmetric cryptography or
 Edwards-Curve Digital Signature Algorithm,
or various forms of symmetric pre-shared-key (PSK).
we only consider out of band PSK.  KDF hash algorithm needs to be specified?  PSK can only be assoc with one HKDF in tls1.3
RPKs - https://tools.ietf.org/html/rfc7250

            </t>
                <section title="PSK Identity Requirements">
                <t>
         
See rfc 8446 s2.2 regarding PSK  secret choice

Because determining a correct PSK value on the server side is a computationally intensive operation requiring multiple round trips, a mechanism for hitless key change must be defined.
During TLS handshake, a client MUST use PSK identity as defined in <xref target="RFC4279"/> to signal to the server which PSK value to use.
If server does not recognize PSK identity it MUST respond with decrypt_error alert and MUST NOT respond with unknown_psk_identity.
</t>
<t>
Process to change pre-shared keys on server and client is then:
</t>
<ol>
<li>Add new key with new PSK identity on the server.</li>
<li>Add new key with new PSK identity on the client.</li>
<li>Remove old key with old PSK identity from the client.</li>
<li>Remove old key with old PSK identity from the server.</li>
</ol>
<t>
XXX reference "key life" in rfc8645 ???
</t>
<t>
Note: PSK identity is transmitted in clear text and must not contain information which could aid an attacker who can eavesdrop on the connection.
                </t>
                </section>
                <section title="TLS Certificate Identity Requirements">
                <t>
XXX
                </t>
                </section>
       </section>
     </section>

     <section title="TACACS+ Extended Authentication Packet Types" anchor="ExtendedAuthenticationPacketType">
       <t>
                Versions 1 and 2 of the TACACS+ Protocol, as defined in <xref target="RFC8907"/>, specify the TACACS+ Authentication Packets for START, REPLY and CONTINUE which support the credential validation use case but does not accommodate any further arguments
which may be used to give context to the request.
       </t>
       <t>
         One use-case where this shortcoming inhibits correct operation is for the TACACS+ proxy.
         Because the originating client is not encoded in the regular Authentication START Packet, TACACS+ Servers generally attempt to determine the client from the TCP connection.
         This is effective only for the first step: proxied TACACS+ servers can no longer securely enforce policy based upon the end client IP-Address.
       </t>
       <t>
         Further, advanced use cases (such as SSH key distribution) would otherwise rely on embedding structured information into the single data fields, obfuscating the content of the protocol.
       </t>
       <t>
         To support these use cases, and allow clients to add environment information to the request, the Extended Authentication Packets brings the Authentication phase of the protocol inline with the Authorization and Accounting Phase by incorporating extensible argument
s.
       </t>
       <t>
         The server should expect Extended Authentication Packet Bodies if the minor version in the Packet Header is: 0x2
       </t>

       <section anchor="ExtendedAuthenticationSTARTPacketBody" title="The Extended Authentication START Packet Body">
         <figure>
           <artwork><![CDATA[
 1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
+----------------+----------------+----------------+----------------+
|    action      |    priv_lvl    |  authen_type   | authen_service |
+----------------+----------------+----------------+----------------+
|    user_len    |    port_len    |  rem_addr_len  |    data_len    |
+----------------+----------------+----------------+----------------+
|    arg_cnt                                                        |
+----------------+----------------+----------------+----------------+
|    arg_1_len                                                      |
+----------------+----------------+----------------+----------------+
|      ...                                                          |
+----------------+----------------+----------------+----------------+
|    arg_N_len                                                      |
+----------------+----------------+----------------+----------------+
|    user ...
+----------------+----------------+----------------+----------------+
|    port ...
+----------------+----------------+----------------+----------------+
|    rem_addr ...
+----------------+----------------+----------------+----------------+
|    data...
+----------------+----------------+----------------+----------------+
|    arg_1 ...
+----------------+----------------+----------------+----------------+
|    arg_2 ...
+----------------+----------------+----------------+----------------+
|    ...
+----------------+----------------+----------------+----------------+
|    arg_N ...
+----------------+----------------+----------------+----------------+
]]></artwork>
         </figure>
         <t>
           The action, priv_level, authen_type, authen_service, user_len, port_len, rem_addr_len, data_len, user, port, rem_addr and data fields are used exactly as defined in the Authentication START Packet Body in <xref target="RFC8907"/>.
         </t>
         <t>The following fields contain the arguments that may be used to extend the authentication process. These are common to the Extended Authentication START, Extended Authentication REPLY, and Extended Authentication CONTINUE packet bodies; these fields represent the sole update from the previous START, REPLY and CONTIMUE packet bodies.</t>
         <t>The new fields are as follows:</t>
         <t>arg_cnt</t>
         <t>This represents the number of arguments in the packet.</t>

         <t>arg_1_len ... arg_N_len, arg_1 ... arg_N</t>

         <t>
           Each argument is encoded in the packet as a single arg field (arg_1 ... arg_N) with a corresponding length field that indicates the length of each argument in bytes.
         </t>
         <t>
           The arguments are argument-value pairs.
           The argument and the value are in a single string and are separated by either a "=" (0X3D) or a "*" (0X2A).
           The equals sign indicates a mandatory argument. The asterisk indicates an optional one.
           For the rules regarding optional and mandatory arguments, refer to <xref target="RFC8907"/>
         </t>
         <t>
           The addition of arguments to the authentication packets is intended to permit the flexibility for TACACS+ phase that has been available previously for authorization and accounting.
           These fields are intended to be used as needed in deployment, they are used in this document in the enhancments for <xref target="SSH">SSH</xref>, and to support the origin client to enhance TACACS+ Proxy:
         </t>

         <t>origin_client</t>
         <t>
           The IP-Address of the originating TACACS+ client.
           This is text encoded in line with the rest of the TACACS+ protocol, and may be IPv4 or IPv6.
           This argument is optional.
           IPv4 addresses are specified as octet numeric values separated by dots ('.').
           IPv6 address text representation is defined in [RFC5952].
         </t>
       </section>

       <section anchor="ExtensionAuthenticationREPLYPacketBody" title="The Extension Authentication REPLY Packet Body">
         <t>
           The TACACS+ server sends only one type of extended authentication packet to the client.
         </t>
         <figure>
           <artwork><![CDATA[
 1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
+----------------+----------------+----------------+----------------+
|     status     |      flags     |        server_msg_len           |
+----------------+----------------+----------------+----------------+
|           data_len              |
+----------------+----------------+----------------+----------------+
|    arg_cnt                                                        |
+----------------+----------------+----------------+----------------+
|    arg_1_len                                                      |
+----------------+----------------+----------------+----------------+
|      ...                                                          |
+----------------+----------------+----------------+----------------+
|    arg_N_len                                                      |
+----------------+----------------+----------------+----------------+
|    data ...
+----------------+----------------+----------------+----------------+
|    server_msg ...
+----------------+----------------+----------------+----------------+
|    arg_1 ...
+----------------+----------------+----------------+----------------+
|    arg_2 ...
+----------------+----------------+----------------+----------------+
|    ...
+----------------+----------------+----------------+----------------+
|    arg_N ...
+----------------+----------------+----------------+----------------+
]]></artwork>
         </figure>
         <t>
           The status, flags, server_msg_len, data_len, server_msg, and data fields are used exactly as defined in the Authentication REPLY Packet Body in <xref target="RFC8907"/>].
         </t>
         <t>
           The new arg_cnt, arg_1 ... arg_N, and arg_1_len .... arg_N_len fields are used as defined in <xref target="ExtendedAuthenticationSTARTPacketBody">The Extended Authentication START Packet Body</xref>.
         </t>
       </section>

       <section anchor="ExtendedAuthenticationCONTINUEPacketBody" title="The Extended Authentication CONTINUE Packet Body">
         <t>
           This packet is sent from the client to the server following the receipt of an Extended REPLY packet.
         </t>
         <figure>
           <artwork><![CDATA[
 1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
+----------------+----------------+----------------+----------------+
|          user_msg len           |            data_len             |
+----------------+----------------+----------------+----------------+
|     flags      |                                                  |
+----------------+----------------+----------------+----------------+
|    arg_cnt                                                        |
+----------------+----------------+----------------+----------------+
|    arg_1_len                                                      |
+----------------+----------------+----------------+----------------+
|      ...                                                          |
+----------------+----------------+----------------+----------------+
|    arg_N_len                                                      |
+----------------+----------------+----------------+----------------+
|  user_msg ...
+----------------+----------------+----------------+----------------+
|    data ...
+----------------+----------------+----------------+----------------+
|    arg_1 ...
+----------------+----------------+----------------+----------------+
|    arg_2 ...
+----------------+----------------+----------------+----------------+
|    ...
+----------------+----------------+----------------+----------------+
|    arg_N ...
+----------------+----------------+----------------+----------------+
]]></artwork>
         </figure>
         <t>
           The user_msg len, data_len, flags, user_msg, and data fields are used exactly as defined in the Authentication REPLY Packet Body in <xref target="RFC8907"/>.
         </t>
         <t>
           The new arg_cnt, arg_1 ... arg_N, and arg_1_len .... arg_N_len fields are used as defined in <xref target="ExtendedAuthenticationSTARTPacketBody">The Extended Authentication START Packet Body</xref>.
         </t>
       </section>
     </section>

     <section anchor="SSH" title="SSH">
       <t>
         Most network equipment now support <xref target="RFC4251">SSH</xref> for Command Line Interface (CLI) and <xref target="RFC6242">Netconf</xref>.
         Operators SHOULD use SSH public keys for authentication.
         Some devices support public keys in native configuration, but there is desire to centrally manage keys and SSH subsystem authorization.
       </t>

       <section title="New Enumerated TACACS+ Protocol Values and well-known AVPs">
         <t>
           The following new enumerated TACACS+ protocol values and well-known AVPs are needed to support SSH in the subsequent sections.
           These new values augment those in <xref target="RFC8907"/> Sections 5.1 - 5.3, 6.1, and 8.2 as follows:
         </t>
	 <dl newline="true">
	   <dt>TAC_PLUS_AUTHEN_TYPE_SSHPK := 0x07</dt>
           <dd>Extended Authentication START Packet authen_type for SSH pubkeys.</dd>

	   <dt>TAC_PLUS_AUTHEN_STATUS_GETSSHPKTYPE := 0x22</dt>
           <dd>Extended Authentication REPLY Packet status to solicit SSH pubkey type.</dd>
	   <dt>TAC_PLUS_AUTHEN_STATUS_SSHPK := 0x23</dt>
           <dd>Extended Authentication REPLY Packet status to provide SSH pubkeys.</dd>

	   <dt>TAC_PLUS_REPLY_FLAG_FRAGMENT := 0x02</dt>
           <dd>Extended Authentication REPLY Packet flag indicating the REPLY is incomplete.</dd>
	   <dt>TAC_PLUS_CONTINUE_FLAG_FRAGMENT := 0x02</dt>
           <dd>Extended Authentication CONTINUE Packet flag requesting the next REPLY packet of an incomplete REPLY.</dd>
	   <dt>TAC_PLUS_CONTINUE_FLAG_PASS := 0x04</dt>
           <dd>Extended Authentication CONTINUE Packet flag indicating authentication success.</dd>
	   <dt>TAC_PLUS_CONTINUE_FLAG_FAIL := 0x08</dt>
           <dd>Extended Authentication CONTINUE Packet flag indicating authentication failure.</dd>
	   <dt>TAC_PLUS_CONTINUE_FLAG_ERROR := 0x10</dt>
           <dd>Extended Authentication CONTINUE Packet flag indicating authentication error.</dd>

	   <dt>AVP ssh_pubkey_type (String)</dt>
           <dd>Attribute to carry SSH public key type names.</dd>

	   <dt>AVP ssh_pubkey (String)</dt>
           <dd>Attribute to carry SSH public keys.</dd>

           <dt>TAC_PLUS_AUTHEN_METH_SSHPK := 0x21</dt>
           <dd>Authorization REQUEST Packet authen_method for SSH pubkey authentication.</dd>

           <dt>AVP ssh-subsystem (String)</dt>
           <dd>Attribute to carry SSH subsystem name for authorization</dd>
         </dl>
       </section>

       <section title="SSH Public Key Support">
         <t>
	   To support central management of SSH public keys via TACACS+, the Authentication sequence of <xref target="RFC8907"/> Section 5.4 is extended using <xref target="ExtendedAuthenticationPacketType">Extended Authenication Packet</xref> sequences to deliver SSH public keys to devices for local verification.
	 </t>
         <t>
           Besides new header values and flags and AVPs for Extended Authentication Packets, the SSH public key authentication process differs from other TACACS+ authentication types in that there may be more Authentication Reply and Authentication Continue Packets pairs than previously.
         </t>
         <t>The process follows:</t>
         <ol>
         <li>
            The client begins an authentication session with an Extended Authentication START Packet.
            The START packet MUST include a non-zero-length username and the server MUST send an Authentication REPLY Packet with status TAC_PLUS_AUTHEN_STATUS_ERROR, if the client fails to do so.
            The client MAY include one or more instances of the ssh_pubkey_type AVP, indicating the SSH public key types that it wants.
            The set of permissible values for this AVP are the SSH public algorithm names in the IANA pubkey alg names registry, <xref target="SSHPARAM"/>.
            The server MUST NOT reply with status TAC_PLUS_AUTHEN_STATUS_ERROR if it receives an algorithm name that it does not recognize.
            If the client marks a ssh_pubkey_type AVP as mandatory, the server MUST reply with at least one key of that type for the given user or reply with status TAC_PLUS_AUTHEN_STATUS_SSHNOPK with the relevant AVP.
            The client MAY send an empty algorithm name to request all type available for the given user.
            The process ends and the client MUST start a new authentication session if it receives status SSHNOPK or ERROR.
         </li>

         <li>
           If a ssh_pubkey_type AVP was not provided in the START packet, the server replies with the status code TAC_PLUS_AUTHEN_STATUS_GETSSHPKTYPE.
           The client MUST send a CONTINUE packet with one or more ssh_pubkey_type AVPs, else the server sends a REPLY packet with status TAC_PLUS_AUTHEN_STATUS_ERROR.
         </li>

         <li>
           If the server has none of the wanted ssh_pubkey_type(s) or any of the mandatory ssh_pubkey_types for the user or no pubkeys at all, the server MUST send a REPLY packet with status TAC_PLUS_AUTHEN_STATUS_SSHNOPKi with the relevant ssh_pubkey_type AVP(s).
           The process ends and the client MUST start a new authentication session if it receives status SSHNOPK or ERROR.
<br/>
<br/>
XXX does it need to mention all cases where a new session is required?
         </li>

         <li>
           The server send REPLY packets with status TAC_PLUS_AUTHEN_STATUS_SSHPK and includes one or more ssh_pubkey optional AVPs.
           The ssh_pubkey AVPs are formatted according to the rules of <xref target="RFC4716">SSH Public Key File Format</xref>; one key per AVP.
           As such, client MUST be prepared to accept Key File Headers.
           Since it is possible to have more ssh_pubkey AVPs than fit in a REPLY packet, the server SHOULD set the REPLY packet flag TAC_PLUS_REPLY_FLAG_FRAGMENT if two or more packets are required, indicating that the client SHOULD request the remainder.
           An AVP SHALL NOT span multiple packet; each must be contained entirely in the packet in which it begins.
<br/>
<br/>
XXX is optional correct for the ssh_pubkey AVP?
<br/>
XXX is rfc4716 format the best choice?
<br/>
XXX should an AVP be allowed to span multiple packets?  ie: that the packet
    payload should be concatenated.  This has implications for more than
    just ssh pubkeys.  We decided no; Douglas will add text.
         </li>

         <li>
           If the TAC_PLUS_REPLY_FLAG_FRAGMENT flag is set, the client MAY reply with the same CONTINUE packet as before with the new TAC_PLUS_CONTINUE_FLAG_FRAGMENT flag set.
           The server replies with the next REPLY packet as before, clearing the TAC_PLUS_REPLY_FLAG_FRAGMENT flag of the last REPLY packet.
           This repeats until the last REPLY packet is received, the client aborts the authentication process, or an error occurs.
           The client MUST NOT set TAC_PLUS_REPLY_FLAG_FRAGMENT if the REPLY packet did not have the TAC_PLUS_REPLY_FLAG_FRAGMENT flag set and the server MUST reply with TAC_PLUS_AUTHEN_STATUS_ERROR if it does so.
         </li>

         <li>
           Once the client has all of the pubkeys, it performs the ssh pubkey authentication with its ssh client.
           The client MUST then reply to the server with the status of that authentication by sending a CONTINUE packet with one of the following new or existing CONTINUE flags: TAC_PLUS_CONTINUE_FLAG_ABORT, TAC_PLUS_CONTINUE_FLAG_PASS, TAC_PLUS_CONTINUE_FLAG_FAIL, or TAC_PLUS_CONTINUE_FLAG_ERROR.
         </li>

         <li>
           The client must give the server the final consent, by waiting for a REPLY packet with one of the status: TAC_PLUS_AUTHEN_STATUS_PASS, TAC_PLUS_AUTHEN_STATUS_FAIL, or TAC_PLUS_AUTHEN_STATUS_ERROR, thus ending the authentication session.
         </li>
         </ol>
       </section>

       <section title="SSH Authorization and Accounting">
         <t>
           To support central management of SSH and SSH subsystem authorization and accounting via TACACS+, this document adds a new authen_method to <xref target="RFC8907">RFC8907 Section 6.1 Authorization REQUEST</xref> and a well-known AVP to <xref target="RFC8907">Section 8.2 Authorization Arguments</xref>.
         </t>
         <t>
           The new authen_method TAC_PLUS_AUTHEN_METH_SSHPUBKEY indicates that the user was authenticated with a SSH public key.
<br/><br/>
XXX This where an TAC_PLUS_AUTHEN_SVC_SSH, as opposed to TAC_PLUS_AUTHEN_SVC_LOGIN, might be sensible.  Perhaps only for _SVC_SSHSUBSYS??  Is the type of auth interesting for authorization?
         </t>
         <t>
           The new well-known ssh-subsystem AVP defines the SSH subsystem for which the authorization is requested and MUST be present if the authen_method is TAC_PLUS_AUTHEN_METH_SSHPUBKEY and SHOULD be present any time the authorization is for a SSH connection.
         </t>
         <t>
           The set of permissible values for this AVP are the SSH Subsystem Names defined in the <xref target="SSHSUBSYS">IANA SSH Connection Protocol Subsystem Names Registry</xref>, which are case-sensitive as specified and otherwise constrained by <xref target="RFC4250"/> Section 4.6.1.
           The client MAY send an empty subsystem name to indicate no subsystem, also known as a shell or CLI.
           The server MUST NOT reply with status TAC_PLUS_AUTHOR_STATUS_ERROR if it receives a subsystem name whose syntax is valid but whose value is not recognized.
         </t>
         <t>
           These new authen_methods and AVPs apply equally to accounting.
<br/><br/>
XXX what if the _AUTHEN_METH_ is not _SSHPUBKEY, perhaps just _LOCAL; the subsystem is still relevant.  is a _SVC_SSH needed?
<br/><br/>
XXX is the "ssh subsystem" AVP for authorization a bad idea?
<br/><br/>
XXX are any other AVPs or text needed to describe authorization for the existing registered subsystems?  do they need anything specifically or generally to support authorization for them?  Perhaps any such text should be a separate per-subsys draft?
<br/><br/>
XXX why is sftp missing from the registered subsystem list?
<br/><br/>
XXX add netconf_acct or ssh_subsystem_acct accounting "event" type?  or ssh subsystem name with "_acct" postfix?
         </t>
       </section>
     </section>

     <section title="Deprecation of TACACS+ PSK and Encryption">
       <t>
         The <xref target="RFC8907">TACACS+ Protocol</xref> specified a form of encryption and Peer authentication using a pre-shared key that is wholly inadequate by modern standards and is diminutively referred to as data obfuscation.
         The introduction of TLS PSK and certificate Peer authentication and TLS encryption to TACACS+ obsolesces these former mechanisms and so are hereby deprecated.
       </t>
       <t>
         Along with them, the TAC_PLUS_UNENCRYPTED_FLAG flag in the TACACS+ header, the least significant bit (LSB) of the flags field, is also deprecated.
         Peers compliant with this document should set the TAC_PLUS_UNENCRYPTED_FLAG flag in the Packet Header of packets on TLS Connections, indicating that the data obfuscation is not used.
         A Peer that receives a Packet without the flag set on a TLS Connection, should immediately log the error and terminate the TCP/IP connection.
       </t>
       <t>
         A Client that is compliant with this document MUST NOT utilize these deprecated authentication or encryption methods on TLS Connections/
       </t>
       <t>
         A TACACS+ Server or Client implementation SHOULD, and is strongly encouraged to, offer a configuration mechanism to disable non-TLS connections entirely.
       </t>
       <t>
         A future document SHOULD be written to deprecate the well-known TCP/IP port 49, allocated by the <xref target="RFC8907">TACACS+ Protocol</xref>.
       </t>
       <t>
XXX Anything else to deprecate?  We had discussed deprecation of MS-CHAP v1. ????
       </t>
     </section>

     <section title="Security Considerations">
       <section title="TLS">
         <t>
           This document improves the confidentiality, integrity, and authentication of the connection and network traffic between the TACACS+ Peers by adding TLS support.
           This does not in itself protect the server nor clients; the operator and equipment vendors have a role.
           That role is to diligently follow current best practices for maintaining the integrity of network devices and selection of TLS key and encryption algorithms.
         </t>
         <section title="TLS Options">
           <t>
             It is not and never will be reasonable to expect RFCs be updated in perpetuity as each new TLS version and/or algorithm emerges nor at a rate to keep pace.
             It would be highly desirable for the TLS working group to publish a single document, that evolves with TLS and its algorithms, which RFCs using TLS, such as this one, could reference without the need to update those RFCs, thus allowing them to evolve by inheri
tance.
             As no such document exists, implementers and operators SHOULD make informed use of RFCs to determine which TLS versions and algorithms should be supported, deprecated, or abandoned, in the absence of updates to this RFC.
           </t>
         </section>
         <section title="TLS Use">
           <t>
             TLS encryption SHOULD be used in deployments when both the clients and servers support it.
             Servers that support TLS encryption MAY be configured to allow Unsecure Connections when TLS encryption is not supported by the client, but this is NOT RECOMMENDED because of the threat of downgrade attacks, as described in <xref target="wellknown"/>.
             Unsecure Connections would be better served by separate Servers from the TLS Servers.
           </t>
           <t>
             It is NOT RECOMMENDED to deploy TACACS+ without TLS authentication and encryption, except for test and debug environments.
           </t>
         </section>
       </section>

       <section title="Well-Known TCP/IP Port" anchor="wellknown">
         <t>
           A new port is considered appropriate and superior to a "STARTTLS" command because it allows:
         </t>
         <ul>
           <li>ease of blocking the unencrypted or inferiorly encrypted connections by the TCP/IP port number,</li>
           <li>passive Intrusion Detection Systems (IDSs) monitoring the unencrypted version to be unaffected by the introduction of TLS,</li>
           <li>avoidance of Man in the Middle (MitM) attacks that can interfere with STARTTLS,</li>
           <li>and helps prevent the accidental exposure of sensitive information due to misconfiguration.</li>
         </ul>
         <t>
           However, co-existence of inferior authentication and encryption, whether an Unsecure Connection or deprecated parts that compose TLS, also presents opportunity for down-grade attacks.
           Causing failure of connections to the TLS-enabled service or the negotiation of shared algorithm support are two such down-grade attacks.
           The simplest way to address the exposure from Unsecure Connection methods is to refuse Unsecure Connections at the server entirely, perhaps using separate servers for Unsecure Connections and TLS.
           Another approach is mutual configuration that requires TLS.
           Clients and servers SHOULD support configuration that requires Peers, globally and individually, use TLS.
           Furthermore, Peers SHOULD be configurable to limit offered or recognized TLS versions and algorithms to those recommended by standards bodies and implementers.
         </t>
         <t>
           Servers and clients could also maintain a cache of Peers that have engaged in TACACS+ TLS connections and demand TLS from that point forward.
           However, this has potential to be a Denial of Service (DoS) vector, whereby an attacker causes a sever to believe that a client that does not support TLS has successfully connected with TLS.
         </t>
       </section>
     </section>

     <section title="IANA Considerations">
       <t>
         The authors request that, when this draft is accepted by the working group, the OPSAWG Chairs submit a request to IANA for an early allocation, per <xref target="RFC4020"/> and <xref target="RFC6335"/>, of a new well-known system TCP/IP port number for
 "tacacss", described as "TACACS+ over TLS".
         The name "tacacss" follows the common practice of appending an "s" to the name given to the non-TLS well-known port.
         This allocation is justified in <xref target="wellknown"/>.
       </t>
       <t>
         RFC EDITOR: this port number should replace "[TBD]" within this document.
       </t>
     </section>

     <section title="Acknowledgments">
       <t>
         The author(s) would like to thank Russ Housley, Steven M. Bellovin, Stephen Farrell, Alan DeKok, and Tom Petch for their support, insightful review, and/or comments.
       </t>
     </section>

   </middle>

   <back>
     <references title="Normative References">
       <referencegroup anchor="BCP14" target="https://www.rfc-editor.org/bcp/bcp14.txt">
         <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
         <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
       </referencegroup>
       <?rfc include="reference.RFC.4279.xml"?>
       <?rfc include="reference.RFC.4250.xml"?>
       <?rfc include="reference.RFC.4716.xml"?>
       <?rfc include="reference.RFC.5246.xml"?>
       <?rfc include="reference.RFC.8446.xml"?>
       <?rfc include="reference.RFC.8907.xml"?>
       <reference anchor="SSHPARAM" target="https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml">
         <front>
           <title>SSH Protocol Parameters</title>
           <author fullname="IANA"></author>
         </front>
       </reference>
       <reference anchor="SSHSUBSYS" target="https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-15">
         <front>
           <title>SSH Protocol Subsystem Names</title>
           <author fullname="IANA"></author>
         </front>
       </reference>
     </references>
     <references title="Informative References">
       <?rfc include="reference.RFC.3365.xml"?>
       <?rfc include="reference.RFC.4020.xml"?>
       <?rfc include="reference.RFC.4251.xml"?>
       <?rfc include="reference.RFC.6242.xml"?>
       <?rfc include="reference.RFC.6335.xml"?>
       <?rfc include="reference.RFC.7605.xml"?>
     </references>

   </back>
</rfc>
