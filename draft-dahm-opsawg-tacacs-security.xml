<?xml version='1.0' encoding='utf-8'?>
<!-- -*- indent-with-tabs: 0 -*- -->
<?xml-model href="rfc7991bis.rnc"?>
<!-- <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?> -->
<!-- This third-party XSLT can be enabled for direct transformations in XML processors, including most browsers -->
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<rfc docName="draft-dahm-opsawg-tacacs-security-00"
     category="info"
     ipr="trust200902"
     submissionType='IETF'
     consensus="true"
     updates="RFC8907" 
     xmlns:xi="http://www.w3.org/2001/XInclude" version="3"
     sortRefs="true"
     indexInclude="false"
     tocDepth="3">


   <front>
     <title abbrev="TACACS+ Security">
            TACACS+ Security and SSH Public Keys
     </title>
     <author fullname="Thorsten Dahm" initials="T." surname="Dahm">
       <address>
         <postal>
           <street></street>
           <code></code>
           <city></city>
           <country></country>
         </postal>
         <email>thorsten.dahm@gmail.com</email>
       </address>
     </author>
        
     <author fullname="Douglas Gash" initials="D." surname="Gash">
       <organization>Cisco Systems, Inc.</organization>
       <address>
         <postal>
           <street></street>
           <code></code>
           <city></city>
           <country></country>
         </postal>
         <email>dcmgash@cisco.com</email>
       </address>
     </author>

     <author fullname="Andrej Ota" initials="A." surname="Ota">
       <address>
         <postal>
           <street></street>
           <code></code>
           <city></city>
           <country></country>
         </postal>
         <email>andrej@ota.si</email>
       </address>
     </author>

     <author fullname="John Heasley" initials="J." surname="Heasley">
       <organization abbrev="NTT">NTT</organization>
       <address>
         <postal>
           <street></street>
           <code></code>
           <city></city>
           <country></country>
         </postal>
         <email>heas@shrubbery.net</email>
       </address>
     </author>

     <date />
     <area>Operations and Management Area (ops)</area>
     <workgroup>Operations and Management Area Working Group</workgroup>

     <keyword>TACACS+</keyword>

     <abstract>
     <t>
       The <xref target="RFC8907">TACACS+ Protocol</xref> provides device administration for routers, network access servers and other networked computing devices via one or more centralized servers.
       This document, a companion to the <xref target="RFC8907">TACACS+ protocol</xref>, adds new packet formats to improve security and function and support for <xref target="RFC4716">SSH</xref> public keys.
     </t>
     </abstract>
     <note title="Requirements Language">
       <t>
         The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="BCP14"/> when, and only when, they appear in all capitals, as shown here.
       </t>
     </note>
   </front>

   <middle>
     <section title="Introduction">
       <t>
         The <xref target="RFC8907">TACACS+ Protocol</xref> provides device administration for routers, network access servers and other networked computing devices via one or more centralized servers.
         The protocol provides authentication, authorization and accounting services for TACACS+ clients.
       </t>
       <t>
         Authors of <xref target="RFC8907"/> and network operators have expressed interest in deprecating a few antiquated protocol features, addressing a limitation of authentication policy, and adding support for SSH public keys.
	 These are addressed herein.
       </t>
       <t>
	 To improve security and functionality of applying policy to the authentication process in a TACACS+ Session, new authentication packet formats are introduced that are uniform to authorization and accounting.
         For SSH authentication using public keys, highly desired by the operator community, this document introduces a method to support sending public keys to a TACACS+ client, allowing centralized management.
       </t>
     </section>

     <section title="Technical Definitions">
       <t>
         The Technical Definitions section of the <xref target="RFC8907">TACACS+ Protocol</xref> is fully applicable here and will not be repeated, though may be augmented.
         The following terms are also used in this document.
       </t>
       <t>
       </t>
       <section title="AVP">
         <t>
           An Attribute-Value Pair or AVP is another name a TACACS+ argument as defined in <xref target="RFC8907"/> Sections 6.1 and 8.
         </t>
       </section>
       <section title="Empty Value">
         <t>
           An empty or zero-length value of an AVP as defined in <xref target="RFC8907"/> Sections 8.1.
         </t>
       </section>
       <section title="Peer">
         <t>
           This refers to a TACACS+ Server or Client.
         </t>
       </section>
     </section>

     <section title="TACACS+ Extended Authentication Packet Types" anchor="ExtendedAuthenticationPacketType">
       <t>
         Versions 1 and 2 of the TACACS+ Protocol, as defined in <xref target="RFC8907"/>, specify the TACACS+ Authentication Packets for START, REPLY and CONTINUE which support the credential validation use case but does not accommodate any further augmentation which may be used to give context to the request.
       </t>
       <t>
         Further, advanced use cases (such as SSH key distribution) would otherwise rely on embedding structured information into the single data fields, thus obfuscating the content of the protocol, can instead augment the arguments.
       </t>
       <t>
         To support these use cases, and allow clients to add environment information to the request, the Extended Authentication Packets brings the Authentication phase of the protocol inline with the Authorization and Accounting Phase by incorporating extensible argument
s.
       </t>
       <t>
         The server should expect Extended Authentication Packet Bodies if the minor version in the Packet Header is: 0x2
       </t>

       <section anchor="ExtendedAuthenticationSTARTPacketBody" title="The Extended Authentication START Packet Body">
         <figure>
           <artwork><![CDATA[
 1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
+----------------+----------------+----------------+----------------+
|    action      |    priv_lvl    |  authen_type   | authen_service |
+----------------+----------------+----------------+----------------+
|    user_len    |    port_len    |  rem_addr_len  |    data_len    |
+----------------+----------------+----------------+----------------+
|    arg_cnt                                                        |
+----------------+----------------+----------------+----------------+
|    arg_1_len                                                      |
+----------------+----------------+----------------+----------------+
|      ...                                                          |
+----------------+----------------+----------------+----------------+
|    arg_N_len                                                      |
+----------------+----------------+----------------+----------------+
|    user ...
+----------------+----------------+----------------+----------------+
|    port ...
+----------------+----------------+----------------+----------------+
|    rem_addr ...
+----------------+----------------+----------------+----------------+
|    data...
+----------------+----------------+----------------+----------------+
|    arg_1 ...
+----------------+----------------+----------------+----------------+
|    arg_2 ...
+----------------+----------------+----------------+----------------+
|    ...
+----------------+----------------+----------------+----------------+
|    arg_N ...
+----------------+----------------+----------------+----------------+
]]></artwork>
         </figure>
         <t>
           The action, priv_level, authen_type, authen_service, user_len, port_len, rem_addr_len, data_len, user, port, rem_addr and data fields are used exactly as defined in the Authentication START Packet Body in <xref target="RFC8907"/>.
         </t>
         <t>The following fields contain the arguments that may be used to extend the authentication process. These are common to the Extended Authentication START, Extended Authentication REPLY, and Extended Authentication CONTINUE packet bodies; these fields represent the sole update from the previous START, REPLY and CONTINUE packet bodies.</t>
         <t>The new fields are as follows:</t>
         <t>arg_cnt</t>
         <t>This represents the number of arguments in the packet.</t>

         <t>arg_1_len ... arg_N_len, arg_1 ... arg_N</t>

         <t>
           Each argument is encoded in the packet as a single arg field (arg_1 ... arg_N) with a corresponding length field that indicates the length of each argument in bytes.
         </t>
         <t>
           The arguments are argument-value pairs.
           The argument and the value are in a single string and are separated by either a "=" (0X3D) or a "*" (0X2A).
           The equals sign indicates a mandatory argument. The asterisk indicates an optional one.
           For the rules regarding optional and mandatory arguments, refer to <xref target="RFC8907"/>
         </t>
         <t>
           Multiple arguments with the same name are permitted within a packet, a common example is cmd-arg.
           The handling of repeated arguments is specific to the semantics of the argument and so are documented with that argument.
           Order is significant when processing arguments.
         </t>
	       
         <t>
           The addition of arguments to the authentication packets is intended to permit the flexibility for the TACACS+ authentication phase that has been available previously for authorization and accounting.
           These fields are intended to be used as needed in deployment, they are used in this document in the enhancements for <xref target="SSH">SSH</xref>:
         </t>

         <t>origin_client</t>
         <t>
           Contains the IP-Address of the originating TACACS+ client.
           This is text encoded in line with the rest of the TACACS+ protocol, and may be IPv4 or IPv6.
           This argument is optional and can be included in all TACACS+ protocol START packets, Authentication, Authorization, and Accounting.
           IPv4 addresses are specified as quad-octet numeric values separated by dots ('.').
           IPv6 address text representation is defined in <xref target="RFC5952"/>.
         </t>
       </section>

       <section anchor="ExtensionAuthenticationREPLYPacketBody" title="The Extension Authentication REPLY Packet Body">
         <t>
           The TACACS+ server sends only one type of extended authentication packet to the client.
         </t>
         <figure>
           <artwork><![CDATA[
 1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
+----------------+----------------+----------------+----------------+
|     status     |      flags     |        server_msg_len           |
+----------------+----------------+----------------+----------------+
|           data_len              |
+----------------+----------------+----------------+----------------+
|    arg_cnt                                                        |
+----------------+----------------+----------------+----------------+
|    arg_1_len                                                      |
+----------------+----------------+----------------+----------------+
|      ...                                                          |
+----------------+----------------+----------------+----------------+
|    arg_N_len                                                      |
+----------------+----------------+----------------+----------------+
|    data ...
+----------------+----------------+----------------+----------------+
|    server_msg ...
+----------------+----------------+----------------+----------------+
|    arg_1 ...
+----------------+----------------+----------------+----------------+
|    arg_2 ...
+----------------+----------------+----------------+----------------+
|    ...
+----------------+----------------+----------------+----------------+
|    arg_N ...
+----------------+----------------+----------------+----------------+
]]></artwork>
         </figure>
         <t>
           The status, flags, server_msg_len, data_len, server_msg, and data fields are used exactly as defined in the Authentication REPLY Packet Body in <xref target="RFC8907"/>].
         </t>
         <t>
           The new arg_cnt, arg_1 ... arg_N, and arg_1_len .... arg_N_len fields are used as defined in <xref target="ExtendedAuthenticationSTARTPacketBody">The Extended Authentication START Packet Body</xref>.
         </t>
       </section>

       <section anchor="ExtendedAuthenticationCONTINUEPacketBody" title="The Extended Authentication CONTINUE Packet Body">
         <t>
           This packet is sent from the client to the server following the receipt of an Extended REPLY packet.
         </t>
         <figure>
           <artwork><![CDATA[
 1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8  1 2 3 4 5 6 7 8
+----------------+----------------+----------------+----------------+
|             status              |           user_msg len          |
+----------------+----------------+----------------+----------------+
|            data_len             |
+----------------+----------------+----------------+----------------+
|    arg_cnt                                                        |
+----------------+----------------+----------------+----------------+
|    arg_1_len                                                      |
+----------------+----------------+----------------+----------------+
|      ...                                                          |
+----------------+----------------+----------------+----------------+
|    arg_N_len                                                      |
+----------------+----------------+----------------+----------------+
|  user_msg ...
+----------------+----------------+----------------+----------------+
|    data ...
+----------------+----------------+----------------+----------------+
|    arg_1 ...
+----------------+----------------+----------------+----------------+
|    arg_2 ...
+----------------+----------------+----------------+----------------+
|    ...
+----------------+----------------+----------------+----------------+
|    arg_N ...
+----------------+----------------+----------------+----------------+
]]></artwork>
         </figure>
         <t>
           The user_msg len, data_len, user_msg, and data fields are used exactly as defined in the Authentication REPLY Packet Body in <xref target="RFC8907"/>.
	   However, the status field replaces the flags field and has the following enumeration:
         </t>
	 <ul>	 
	  <li>TAC_PLUS_AUTHEN_CONTINUE_STATUS_NONE := 00 </li> 
	  <li>TAC_PLUS_AUTHEN_CONTINUE_STATUS_PASS := 01 </li> 
          <li>TAC_PLUS_AUTHEN_CONTINUE_STATUS_FAIL := 02 </li>
	  <li>TAC_PLUS_AUTHEN_CONTINUE_STATUS_FRAGMENT := 03 </li>
          <li>TAC_PLUS_AUTHEN_CONTINUE_STATUS_ERROR := 04 </li>
          <li>TAC_PLUS_AUTHEN_CONTINUE_STATUS_ABORT := 05 </li>
	  </ul> 
	 <t>
            TAC_PLUS_AUTHEN_CONTINUE_STATUS_NONE or TAC_PLUS_AUTHEN_CONTINUE_STATUS_ABORT MUST be used when the Extended Authentication Packets are used for the continuation of authentication flows documented in <xref target="RFC8907"/>.
	 </t>
	 <t>
	   The client may prematurely terminate a session by setting the TAC_PLUS_AUTHEN_CONTINUE_STATUS_ABORT or TAC_PLUS_AUTHEN_CONTINUE_STATUS_ERROR status in the CONTINUE message.
	   The remainder are detailed in <xref target="SSH">SSH</xref>.
	 </t>
	 <t>
           The new arg_cnt, arg_1 ... arg_N, and arg_1_len .... arg_N_len fields are used as defined in <xref target="ExtendedAuthenticationSTARTPacketBody">The Extended Authentication START Packet Body</xref>.
         </t>
       </section>
     </section>

     <section anchor="SSH" title="SSH">
       <t>
         Most network equipment now support <xref target="RFC4251">SSH</xref> for Command Line Interface (CLI) and <xref target="RFC6242">NETCONF</xref>.
         Operators SHOULD use SSH public keys for authentication.
         Some devices support public keys in native configuration, but there is desire to centrally manage keys and SSH subsystem authorization.
       </t>

       <section title="New Enumerated TACACS+ Protocol Values and well-known AVPs">
         <t>
           The following new enumerated TACACS+ protocol values and well-known AVPs are needed to support SSH in the subsequent sections.
           These new values augment those in <xref target="RFC8907"/> Sections 5.1 - 5.3, 6.1, and 8.2 as follows:
         </t>
	 <dl newline="true">
	   <dt>TAC_PLUS_AUTHEN_TYPE_SSHPK := 0x07</dt>
           <dd>Extended Authentication START Packet authen_type for SSH pubkeys.</dd>

	   <dt>TAC_PLUS_AUTHEN_STATUS_GETSSHPKTYPE := 0x22</dt>
           <dd>Extended Authentication REPLY Packet status to solicit SSH pubkey type.</dd>
	   <dt>TAC_PLUS_AUTHEN_STATUS_SSHPK := 0x23</dt>
           <dd>Extended Authentication REPLY Packet status to provide SSH pubkeys.</dd>

	   <dt>TAC_PLUS_REPLY_FLAG_FRAGMENT := 0x02</dt>
           <dd>Extended Authentication REPLY Packet flag indicating the REPLY is incomplete.</dd>
	   <dt>TAC_PLUS_AUTHEN_CONTINUE_STATUS_PASS := 0x01</dt>
           <dd>Extended Authentication CONTINUE Packet flag indicating authentication success.</dd>
	   <dt>TAC_PLUS_AUTHEN_CONTINUE_STATUS_FAIL := 0x08</dt>
           <dd>Extended Authentication CONTINUE Packet flag indicating authentication failure.</dd>
	   <dt>TAC_PLUS_AUTHEN_CONTINUE_STATUS_FRAGMENT := 0x03</dt>
           <dd>Extended Authentication CONTINUE Packet flag requesting the next REPLY packet of an incomplete REPLY.</dd>
	   <dt>TAC_PLUS_AUTHEN_CONTINUE_STATUS_ERROR := 0x04</dt>
           <dd>Extended Authentication CONTINUE Packet flag indicating authentication error.</dd>

	   <dt>AVP ssh_pubkey_type (String)</dt>
           <dd>Attribute to carry SSH public key type names.</dd>

	   <dt>AVP ssh_pubkey (String)</dt>
           <dd>Attribute to carry SSH public keys.</dd>

           <dt>TAC_PLUS_AUTHEN_METH_SSHPK := 0x21</dt>
           <dd>Authorization REQUEST Packet authen_method for SSH pubkey authentication.</dd>

           <dt>AVP ssh_subsystem (String)</dt>
           <dd>Attribute to carry SSH subsystem name for authorization</dd>
         </dl>
       </section>

       <section title="SSH Public Key Support">
         <t>
	   To support central management of SSH public keys via TACACS+, the Authentication sequence of <xref target="RFC8907"/> Section 5.4 is extended using <xref target="ExtendedAuthenticationPacketType">Extended Authentication Packet</xref> sequences to deliver SSH public keys to devices for local verification.
	 </t>
         <t>
           Besides new header values and flags and AVPs for Extended Authentication Packets, the SSH public key authentication process differs from other TACACS+ authentication types in that there may be more Authentication Reply and Authentication Continue Packets pairs than previously.
         </t>
         <t>The process follows:</t>
         <ol>
         <li>
           The client begins an authentication session with an Extended Authentication START Packet.
           The START packet MUST include a non-zero-length username and the server MUST send an Authentication REPLY Packet with status TAC_PLUS_AUTHEN_STATUS_ERROR, if the client fails to do so.
           <br/><br/>
           The client MAY include one or more instances of the ssh_pubkey_type AVP, indicating the SSH public key types that it wants.
           The set of permissible values for this AVP are the SSH public algorithm names defined in the <xref target="SSHALGS">IANA SSH Protocol Parameters Registry</xref>, which are case-sensitive as specified and otherwise constrained by <xref target="RFC4250"/> Section 4.6.1.
	   Multiple values MUST be separated by a comma, therefore multiple ssh_pubkey_type AVPs MUST include commas for separation when the Peer concatenates them and the Peer MUST be prepared to ignore a leading or trailing comma in the concatenated value.
           The server MUST NOT reply with status TAC_PLUS_AUTHEN_STATUS_ERROR if it receives an algorithm name that it does not recognize.
           If the client marks a ssh_pubkey_type AVP as mandatory, the server MUST reply with at least one key of that type for the given user or reply with status TAC_PLUS_AUTHEN_STATUS_SSHNOPK with the relevant ssh_pubkey_type AVP.
           <br/><br/>
           The client MAY send an Empty Value for the algorithm name to request all types available for the given user.
           <br/><br/>
           The process ends and the client MUST start a new authentication session if it receives status SSHNOPK or ERROR.
         </li>

         <li>
           If a ssh_pubkey_type AVP was not provided in the START packet, the server replies with the status code TAC_PLUS_AUTHEN_STATUS_GETSSHPKTYPE.
           The client MUST send a CONTINUE packet with one or more ssh_pubkey_type AVPs, else the server sends a REPLY packet with status TAC_PLUS_AUTHEN_STATUS_ERROR.
         </li>

         <li>
           If the server has none of the requested ssh_pubkey_type(s) or any of the mandatory ssh_pubkey_types for the user or no pubkeys at all, the server MUST send a REPLY packet with status TAC_PLUS_AUTHEN_STATUS_SSHNOPK with the ssh_pubkey_type AVP(s) that it received.
           <br/><br/>
           The process ends and the client MUST start a new authentication session if it receives status SSHNOPK or ERROR.
         </li>

         <li>
           The server sends REPLY packets with status TAC_PLUS_AUTHEN_STATUS_SSHPK and includes one or more ssh_pubkey optional AVPs, each containing one or more keys.
           The ssh_pubkey AVPs are formatted according to the rules of <xref target="RFC4716">SSH Public Key File Format</xref>.
           As such, the client MUST be prepared to accept keys with Key File Markers.
	   To address concatenation of multiple ssh_pubkey AVPs or multiple keys in a single AVP, the server MUST terminate each key file End Marker with a Line Termination sequence as specified in RFC4716 Section 3.1.
           <br/><br/>
           Since it is possible to have more ssh_pubkey AVPs than fit in a REPLY packet, the server SHOULD set the REPLY packet flag TAC_PLUS_REPLY_FLAG_FRAGMENT if two or more packets are required, indicating that the client SHOULD request the remainder.
           <br/><br/>
           An AVP SHALL NOT span multiple fragments; each must be contained entirely in the fragment in which it begins.
         </li>

         <li>
           If the TAC_PLUS_REPLY_FLAG_FRAGMENT flag is set, the client MAY reply with the same CONTINUE packet as before with the TAC_PLUS_AUTHEN_CONTINUE_STATUS_FRAGMENT flag set.
           The server replies with the next REPLY fragment as before, clearing the TAC_PLUS_REPLY_FLAG_FRAGMENT flag of the last REPLY fragment.
           This repeats until the last REPLY fragment is received, the client aborts the authentication process, or an error occurs.
           The client MUST NOT set TAC_PLUS_AUTHEN_CONTINUE_STATUS_FRAGMENT if the REPLY packet did not have the TAC_PLUS_REPLY_FLAG_FRAGMENT flag set and the server MUST reply with TAC_PLUS_AUTHEN_STATUS_ERROR if it does so.
         </li>

         <li>
           Once the client has all of the pubkeys, it performs the ssh pubkey authentication with its ssh client.
           The client MUST then reply to the server with the status of that authentication by sending a CONTINUE packet with one of the following new or existing CONTINUE flags: TAC_PLUS_CONTINUE_FLAG_ABORT, TAC_PLUS_AUTHEN_CONTINUE_STATUS_PASS, TAC_PLUS_AUTHEN_CONTINUE_STATUS_FAIL, or TAC_PLUS_AUTHEN_CONTINUE_STATUS_ERROR.
         </li>

         <li>
           The client MUST give the server the final consent, by waiting for a REPLY packet with one of the status: TAC_PLUS_AUTHEN_STATUS_PASS, TAC_PLUS_AUTHEN_STATUS_FAIL, or TAC_PLUS_AUTHEN_STATUS_ERROR, thus ending the authentication session.
         </li>
         </ol>
       </section>

       <section title="SSH Authorization and Accounting">
         <t>
           To support central management of SSH and SSH subsystem authorization and accounting via TACACS+, this document adds a new authen_method to <xref target="RFC8907">RFC8907 Section 6.1 Authorization REQUEST</xref> and a well-known AVP to <xref target="RFC8907">Section 8.2 Authorization Arguments</xref>.
         </t>
         <t>
           The new authen_method TAC_PLUS_AUTHEN_METH_SSHPUBKEY indicates that the user was authenticated with a SSH public key.
         </t>
         <t>
           The well-known ssh_subsystem AVP defines the SSH subsystem for which the authorization is requested and MUST be present any time the authorization is for a SSH connection.
         </t>
         <t>
           The set of permissible values for this AVP are the SSH Subsystem Names defined in the <xref target="SSHSUBSYS">IANA SSH Connection Protocol Subsystem Names Registry</xref>, which are case-sensitive as specified and otherwise constrained by <xref target="RFC4250"/> Section 4.6.1.
           The client MAY send an Empty Value for the subsystem name to indicate no subsystem, also known as a shell or CLI.
           The server MUST NOT reply with status TAC_PLUS_AUTHOR_STATUS_ERROR if it receives a subsystem name whose syntax is valid but whose value is not recognized.
           Subsystems might need additional data for authorization or accounting that will be particular to that subsystem and are therefore out of scope for this document.
         </t>
         <t>
           These new authen_methods and AVPs apply equally to accounting.
         </t>
       </section>
     </section>

     <section title="Protocol Deprecations" anchor="ProtocolDeprecation">
       <t>
           This section deprecates features from the TACACS+ Protocol.
       </t>
       <t>
           MS-CHAPv1: has been replaced by MS-CHAPv2 in most deployments, the intent of this deprecation is to complete the transition. MD4 is still required to 
	   support MS-CHAPv2 so cannot be deprecated at this point It should be noted that the use of MD4 is purely to allow compatible MS-CHAPv2 operation and
	   not for security; the TLS transport is intended to provide that function.
       </t>
       <t>
           TAC_PLUS_AUTHEN_SENDAUTH: the sendauth mechanism can not be supported, as it permits the leak of sensitive information.
       </t>
     </section>

     <section title="Security Considerations">
       <section title="SSH Public Key Caching" anchor="pubkeycache">
         <t>
	   A Client MUST NOT cache SSH public keys received from a Server for future SSH client authentication.
	   Doing so would deny the Server the opportunity to deny authentication for other reasons than key validity or to revoke a key.
	   The Server has no method to revoke a key, except by not offering the key in future authentication sessions.
         </t>
       </section>
     </section>

     <section title="Acknowledgments">
       <t>
         The author(s) would like to thank Russ Housley, Steven M. Bellovin, Stephen Farrell, Alan DeKok, Warren Kumari, and Tom Petch for their support, insightful review, and/or comments.
         <xref target="RFC5425"/> was also used as a basis for the approach to TLS.
       </t>
     </section>

   </middle>

   <back>
     <references title="Normative References">
       <referencegroup anchor="BCP14" target="https://www.rfc-editor.org/bcp/bcp14.txt">
         <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
         <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
       </referencegroup>
       <?rfc include="reference.RFC.4250.xml"?>
       <?rfc include="reference.RFC.4716.xml"?>
       <?rfc include="reference.RFC.5425.xml"?>
       <?rfc include="reference.RFC.8907.xml"?>
       <reference anchor="SSHALGS" target="https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-19">
         <front>
           <title>Public Key Algorithm Names</title>
           <author fullname="IANA"></author>
         </front>
       </reference>
       <reference anchor="SSHSUBSYS" target="https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-15">
         <front>
           <title>SSH Protocol Subsystem Names</title>
           <author fullname="IANA"></author>
         </front>
       </reference>
     </references>
     <references title="Informative References">
       <?rfc include="reference.RFC.4251.xml"?>
       <?rfc include="reference.RFC.5952.xml"?>
       <?rfc include="reference.RFC.6242.xml"?>
     </references>

   </back>
</rfc>
